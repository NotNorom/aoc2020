pub fn part_01(data: &str) -> isize {
    use itertools::Itertools;
    let mut data: Vec<_> = [0usize].to_vec().into_iter().chain(data
        .lines()
        .map(str::parse)
        .filter_map(std::result::Result::ok)
        .sorted()
    ).collect();
    data.push(*data.last().unwrap() + 3);
    let mut diff_1 = 0;
    let mut diff_3 = 0;

    data.windows(2).for_each(|v| {
        if v[1] - v[0] == 1 {
            diff_1 += 1;
        } else {
            diff_3 += 1;
        }
    });

    diff_1 * diff_3
}


// PART 2

//             x   x           x
//3  1   3   1   1   1   3   1   1   3   1   3   3   3
// 00, 01, 04, 05, 06, 07, 10, 11, 12, 15, 16, 19, 22
// 00, 01, 04, 05, 06, 07, 10,     12, 15, 16, 19, 22
// 00, 01, 04, 05,     07, 10, 11, 12, 15, 16, 19, 22
// 00, 01, 04, 05,     07, 10,     12, 15, 16, 19, 22
// 00, 01, 04,     06, 07, 10, 11, 12, 15, 16, 19, 22
// 00, 01, 04,     06, 07, 10,     12, 15, 16, 19, 22
// 00, 01, 04,         07, 10, 11, 12, 15, 16, 19, 22
// 00, 01, 04,         07, 10,     12, 15, 16, 19, 22
//
// maybe 2**x possibilites
// with x being the number of 1 between two 3s
// 3 1 3       ->      = 0
// 3 1 1 3     -> 2**0 = 1
// 3 1 1 1 3   -> 2**1 = 2
// 3 1 1 1 1 3 -> 2**2 = 4
// it's not 2**x!! it's tribonacci numbers



// 19208 distinct permutations
// 33 elements
// 15 x
//
// 19208 - 2**14 - 2**11 - 2**9 - 2**8 - 2**3 == 0
//
//     x   x   x           x   x   x               x   x           x               x   x   x                       x   x   x  
//   1   1   1   1   3   1   1   1   1   3   3   1   1   1   3   1   1   3   3   1   1   1   1   3   1   3   3   1   1   1   1   3
// 00, 01, 02, 03, 04, 07, 08, 09, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46, 47, 48, 49, 52,
// 00, 01, 02, 03, 04, 07, 08, 09, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46, 47,     49, 52
// 00, 01, 02, 03, 04, 07, 08, 09, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46,     48, 49, 52
// 00, 01, 02, 03, 04, 07, 08, 09, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45, 46,         49, 52
// 00, 01, 02, 03, 04, 07, 08, 09, 10, 11, 14, 17, 18, 19, 20, 23, 24, 25, 28, 31, 32, 33, 34, 35, 38, 39, 42, 45,     47, 48, 49, 52
//
// 00,         03, 04, 07,         10, 11, 14, 17,         20, 23,     25, 28, 31,         34, 35, 38, 39, 42, 45, 46,     48, 49, 52
// 00,         03, 04, 07,         10, 11, 14, 17,         20, 23,     25, 28, 31,         34, 35, 38, 39, 42, 45, 46,         49, 52
// 00,         03, 04, 07,         10, 11, 14, 17,         20, 23,     25, 28, 31,         34, 35, 38, 39, 42, 45,     47, 48, 49, 52
// 00,         03, 04, 07,         10, 11, 14, 17,         20, 23,     25, 28, 31,         34, 35, 38, 39, 42, 45,     47,     49, 52
// 00,         03, 04, 07,         10, 11, 14, 17,         20, 23,     25, 28, 31,         34, 35, 38, 39, 42, 45,         48, 49, 52


// 2**0 - 0 = 1
//
//    3    1    3
// 07   10   11   14


// 2**1 - 0 = 2
//
//    3    1    1    3
// 07   10   11   12   15 -
// 07   10        12   15 -


// 2**2 - 0 = 4
//
//    3    1    1    1    3
// 07   10   11   12   13   16 -
// 07   10   11        13   16 -
// 07   10        12   13   16 -
// 07   10             13   16 -


// 2**3 - 1 = 7
//
//    3    1    1    1    1    3
// 07   10   11   12   13   14   17 -
// 07   10   11   12        14   17 -
// 07   10   11        13   14   17 -
// 07   10   11             14   17 -
// 07   10        12   13   14   17 -
// 07   10        12        14   17 -
// 07   10             13   14   17 -
// 07   10                  14   17


// 2**4 - 3 = 13
//
//    3    1    1    1    1    1    3
// 06   09   10   11   12   13   14   17 -
// 06   09   10   11   12        14   17 -
// 06   09   10   11        13   14   17 -
// 06   09   10   11             14   17 -
// 06   09   10        12   13   14   17 -
// 06   09   10        12        14   17 -
// 06   09   10             13   14   17 -
// 06   09   10                  14   17
// 06   09        11   12   13   14   17 -
// 06   09        11   12        14   17 -
// 06   09        11        13   14   17 -
// 06   09        11             14   17 -
// 06   09             12   13   14   17 -
// 06   09             12        14   17 -
// 06   09                  13   14   17
// 06   09                       14   17


// 2**5 - 8 = 24
//
//    3    1    1    1    1    1    1    3
// 05   08   09   10   11   12   13   14   17 -
// 05   08   09   10   11   12        14   17 -
// 05   08   09   10   11        13   14   17 -
// 05   08   09   10   11             14   17 -
// 05   08   09   10        12   13   14   17 -
// 05   08   09   10        12        14   17 -
// 05   08   09   10             13   14   17 -
// 05   08   09   10                  14   17
// 05   08   09        11   12   13   14   17 -
// 05   08   09        11   12        14   17 -
// 05   08   09        11        13   14   17 -
// 05   08   09        11             14   17 -
// 05   08   09             12   13   14   17 -
// 05   08   09             12        14   17 -
// 05   08   09                  13   14   17
// 05   08   09                       14   17
// 05   08        10   11   12   13   14   17 -
// 05   08        10   11   12        14   17 -
// 05   08        10   11        13   14   17 -
// 05   08        10   11             14   17 -
// 05   08        10        12   13   14   17 -
// 05   08        10        12        14   17 -
// 05   08        10             13   14   17 -
// 05   08        10                  14   17
// 05   08             11   12   13   14   17 -
// 05   08             11   12        14   17 -
// 05   08             11        13   14   17 -
// 05   08             11             14   17 -
// 05   08                  12   13   14   17 
// 05   08                  12        14   17 
// 05   08                       13   14   17
// 05   08                            14   17


// 2**6 - 20 = 44
//
//    3    1    1    1    1    1    1    1    3
// 04   07   08   09   10   11   12   13   14   17 -
// 04   07   08   09   10   11   12        14   17 -
// 04   07   08   09   10   11        13   14   17 -
// 04   07   08   09   10   11             14   17 -
// 04   07   08   09   10        12   13   14   17 -
// 04   07   08   09   10        12        14   17 -
// 04   07   08   09   10             13   14   17 -
// 04   07   08   09   10                  14   17
// 04   07   08   09        11   12   13   14   17 -
// 04   07   08   09        11   12        14   17 -
// 04   07   08   09        11        13   14   17 -
// 04   07   08   09        11             14   17 -
// 04   07   08   09             12   13   14   17 -
// 04   07   08   09             12        14   17 -
// 04   07   08   09                  13   14   17
// 04   07   08   09                       14   17
// 04   07   08        10   11   12   13   14   17 -
// 04   07   08        10   11   12        14   17 -
// 04   07   08        10   11        13   14   17 -
// 04   07   08        10   11             14   17 -
// 04   07   08        10        12   13   14   17 -
// 04   07   08        10        12        14   17 -
// 04   07   08        10             13   14   17 -
// 04   07   08        10                  14   17
// 04   07   08             11   12   13   14   17 -
// 04   07   08             11   12        14   17 -
// 04   07   08             11        13   14   17 -
// 04   07   08             11             14   17 -
// 04   07   08                  12   13   14   17 
// 04   07   08                  12        14   17 
// 04   07   08                       13   14   17
// 04   07   08                            14   17
// 04   07        09   10   11   12   13   14   17 -
// 04   07        09   10   11   12        14   17 -
// 04   07        09   10   11        13   14   17 -
// 04   07        09   10   11             14   17 -
// 04   07        09   10        12   13   14   17 -
// 04   07        09   10        12        14   17 -
// 04   07        09   10             13   14   17 -
// 04   07        09   10                  14   17
// 04   07        09        11   12   13   14   17 -
// 04   07        09        11   12        14   17 -
// 04   07        09        11        13   14   17 -
// 04   07        09        11             14   17 -
// 04   07        09             12   13   14   17 -
// 04   07        09             12        14   17 -
// 04   07        09                  13   14   17
// 04   07        09                       14   17
// 04   07             10   11   12   13   14   17 -
// 04   07             10   11   12        14   17 -
// 04   07             10   11        13   14   17 -
// 04   07             10   11             14   17 -
// 04   07             10        12   13   14   17 -
// 04   07             10        12        14   17 -
// 04   07             10             13   14   17 -
// 04   07             10                  14   17
// 04   07                  11   12   13   14   17 
// 04   07                  11   12        14   17 
// 04   07                  11        13   14   17 
// 04   07                  11             14   17 
// 04   07                       12   13   14   17 
// 04   07                       12        14   17 
// 04   07                            13   14   17
// 04   07                                 14   17

// tribonacci!!!

fn tribonacci(n: usize) -> usize {
    match n {
        0 => 0,
        1 => 1,
        2 => 1,
        _ => tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)
    }
}

pub fn part_02(data: &str) -> usize {
    use itertools::Itertools;
    
    let mut data: Vec<_> = [0usize].to_vec().into_iter().chain(data
        .lines()
        .map(str::parse)
        .filter_map(std::result::Result::ok)
        .sorted()
    ).collect();
    data.push(*data.last().unwrap() + 3);

    let differences: Vec<_> = data
        .windows(2)
        .map(|v| v[1] - v[0]).collect();
    
    let res = differences
        .split(|&v| v == 3)
        .map(|v| v.len())
        .fold(1usize, |init, elem| {
            if elem > 0 {
                init * tribonacci(elem+1)
            } else {
                init
            }
    });
    res
}